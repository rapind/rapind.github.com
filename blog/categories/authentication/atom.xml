<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Authentication | Dave Rapin]]></title>
  <link href="http://rapind.github.com/blog/categories/authentication/atom.xml" rel="self"/>
  <link href="http://rapind.github.com/"/>
  <updated>2015-10-17T13:08:35-04:00</updated>
  <id>http://rapind.github.com/</id>
  <author>
    <name><![CDATA[Dave Rapin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Better Authentication]]></title>
    <link href="http://rapind.github.com/blog/2010/12/11/better-authentication/"/>
    <updated>2010-12-11T02:13:00-05:00</updated>
    <id>http://rapind.github.com/blog/2010/12/11/better-authentication</id>
    <content type="html"><![CDATA[<p>Since my last post on authentication and single sign-on I came across an incredibly clever little tool called PasswordMaker.</p>

<p>What makes it so clever is that it changes practically nothing from the normal flow of entering a password and stores nothing locally (so it doesn't matter if you change browser or computer). You type the same password for everything and it instead submits a unique and incredibly strong password for every site. This is done by creating a one-way hash. One-way hashes is also how we encrypt passwords on the backend of websites before storing them in the database. So basically you're original password is getting hashed twice for most websites.</p>

<p>How it works:</p>

<p>You install the PasswordMaker extension for your browser of choice.
You go to sign up for a new website service (or change your password for an existing one).
You type your typical password, let's say it's "b@ng3r5". You should still pick something fairly strong (mix of characters, numbers, symbols, etc.), but even if you didn't you're much better off than most.
When you submit the sign up form, the PasswordMaker extension creates a hash using the data you're entering combined with the domain of the website. In other words it's creating an encrypted version of your real password. This encrypted password is what's submitted to the website. It may end up being something like "4#ae2!9ljh2vk*8c$21h7wh%s$lz" for example.</p>

<p>You come back to the site another day and are asked to login
You type in the same typical password, "b@ng3r5" in this case.
When you submit the login form, the PasswordMaker performs the hashing operation again, using the same password and the same domain. This means it will come up with exactly the same hash as it did when you signed up.
The site's server see your encrypted password, I.e. "4#ae2!9ljh2vk*8c$21h7wh%s$lz" which it then submits to it's own authentication process (usually it also performs a one-way hash again using your password and a random string it generated when you initially signed up and compares that against the encrypted value it has stored against your account).</p>

<p>Benefits:</p>

<p>Some sites still store passwords in clear-text. You're way safer if one of these sites is compromised since you're password was already encrypted before it was sent to the site.
Using the same password for everything in way safer now than it was without this encryption... it's probably still a good idea to rotate passwords, but not as big of a deal as it was without the pre-encryption.
We're practically faking single sign-on.</p>

<p>I still think there may be some potential problems that you need to keep in mind.</p>

<p>If a clever hacker compromises a site that's storing passwords in clear-text they could still potentially crack your password since it will stick out like a sore thumb within the rest of the cleartext passwords. Said hacker will know that yours is the only one that's been encrypted and he may guess that it was encrypted using PasswordMaker. He would then know that your salt (part of the string being used to generate the hash) is the domain of the site and he can use that information to run dictionary attacks with the domain until he gets the same encrypted result.</p>

<p>Obviously this is pretty unlikely and not worth the effort since there's so many other passwords requiring no effort, but still using a strong password to begin with will make this practically impossible. The only way I see this happening is if someone is specifically targeting you and the added effort is really worth it... So maybe 1 chance in a google?</p>

<p>I highly recommend you checkout this tool. It has multiple extensions / plugins for every major browser.</p>

<p><a href="http://passwordmaker.org/">http://passwordmaker.org/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authentication / Single Sign On]]></title>
    <link href="http://rapind.github.com/blog/2010/11/24/authentication-slash-single-sign-on/"/>
    <updated>2010-11-24T15:52:00-05:00</updated>
    <id>http://rapind.github.com/blog/2010/11/24/authentication-slash-single-sign-on</id>
    <content type="html"><![CDATA[<p>I think the current solutions for single-signon are completely impractical. This includes FB Connect, Google, MS, Yahoo, OpenID, etc. What makes them impractical is they require all sites to participate in a fairly complicated integration and have single points of failure which can bring down your authentication (RPX goes down etc.).</p>

<p>I also happen to think the thick-client solutions (password managers) are far more practical. A password manager can maintain multiple profiles with unique auto-generated passwords so if any of the sites that stores your credentials is compromised (say they aren't encrypting your passwords properly) the problem is contained within the compromised site since every other site uses a different generated password. This is far easier to manage as both consumer and service provider. By using a password manager you only need to remember 1 password, the one used to unlock your password manager.</p>

<p>Now what would be great is if you could combine the thick client password manager concept with a cloud based redundant solution (no single point of failure) and have full integration for auto-filling fields with all major browsers.</p>

<p>So let's say you have a master account with a cloud provider like Google or Amazon etc. They provide you with a semi-thick client solution like a browser addon which maintains a connection witch can create profiles on demand for a given site and auto-fill username / password / email at your approval. The password is a very strong auto-generated key associated with the a resource identifier of the site. So that a site could do the standard email / password and include a simple meta-tag identifying it's unique resource. This would make integration on your application optional at worst, and extremely simple at best.</p>

<p>Xmarks is pretty close. It's missing a password generator though: <a href="http://www.xmarks.com/">http://www.xmarks.com/</a></p>
]]></content>
  </entry>
  
</feed>
